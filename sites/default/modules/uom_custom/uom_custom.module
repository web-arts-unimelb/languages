<?php
/**
 * @file
 * Custom module for Faculty of Arts Drupal sites.
 */

/**
 * Implements hook_menu().
 */
function uom_custom_menu() {
  $items['admin/config/people/uom-staff-profiles'] = array(
    'title' => t('UoM Staff Profiles'),
    'description' => t('UoM Staff Profiles'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uom_custom_admin_settings'),
    'access arguments' => array('change role permissions'),
    'file' => 'uom_custom.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function uom_custom_init() {
  global $user;

  // Hide the admin menu icon (and its links) for non site-admin users.
  // And the blocks references on the structure > menus page.
  if (!in_array('site admin', $user->roles)) {
    drupal_add_css('#admin-menu .dropdown li.admin-menu-icon { display: none; }', array('type' => 'inline'));
    drupal_add_css('.page-admin-structure-menu #block-system-help { display: none; }', array('type' => 'inline'));
  }
}

/**
 * Implements hook_menu_alter().
 *
 *
 * The URL aliases and URL redirect permissions assume you will move
 * the respective Management Menu entries to a different place in that
 * menu; e.g.: under admin/content
 */
function uom_custom_menu_alter(&$items) {
  // Change the required permission for the User Settings page.
  $items['admin/config/people/accounts']['access arguments'] = array('change user settings');

  // Change the permission for the Permissions page.
  $items['admin/people/permissions']['access arguments'] = array('change role permissions');

  // Change the permission needed to list and edit URL aliases.
  $items['admin/config/search/path']['access arguments'] = array('edit url aliases');
  $items['admin/config/search/path/edit/%path']['access arguments'] = array('edit url aliases');
  $items['admin/config/search/path/delete/%path']['access arguments'] = array('edit url aliases');

  // Change the permission needed to list and edit URL redirects.
  $items['admin/config/search/redirect']['access arguments'] = array('edit url redirects');
  $items['admin/config/search/redirect/404']['access arguments'] = array('edit url redirects');
}

/**
 * Implements hook_form_alter().
 */
function uom_custom_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // The discipline field should be mandatory *only* for academic staff editing their own profile.
  if ($form_id == 'user_profile_form' || $form_id == 'user_register_form') {
    if (!in_array('academic staff', $user->roles)) {
      $language_code = $form['field_discipline']['#language'];
      $form['field_discipline'][$language_code]['#required'] = FALSE;

      // Inject a validate handler that run before the one in user.module. If
      // the 'academic staff' role is checked, the discipline field becomes mandatory again.
      array_unshift($form['#validate'], 'uom_custom_user_profile_form_validate');
    }

    // Only site admins can create more site admins.
    if (!in_array('site admin', $user->roles)) {
      $role = db_select('role', 'r')->fields('r')->condition('name', 'site admin', '=')->execute()->fetchObject();
      unset ($form['account']['roles']['#options'][$role->rid]);
    }
  }

  // VBO Administer People. Ensure admins cannot delete site admins.
  if ($form_id == 'views_form_peopel_1_page' && !in_array('site admin', $user->roles)) {
    foreach ($form['views_bulk_operations'] as $idx => $item) {
      if (is_array($item)) {
        $account = user_load($item['#return_value']);
        if (in_array('site admin', $account->roles)) {
          $form['views_bulk_operations'][$idx]['#access'] = FALSE;
        }
      }
    }
  }
}

/**
 * Extra validation handler for the user_profile_form form. This only runs if
 * the form is being submitted by an admin or site-admin user.
 */
function uom_custom_user_profile_form_validate($form, &$form_state) {
  global $user;

  // If the user being edited or created is 'academic staff', the discipline field
  // behaves as if it is mandatory.
  $role = db_select('role', 'r')->fields('r')->condition('name', 'academic staff', '=')->execute()->fetchObject();

  $roles = array_filter($form_state['values']['roles']);
  if (!empty($roles[$role->rid])) {
    $language_code = $form['field_discipline']['#language'];
    if (empty($form_state['values']['field_discipline'][$language_code][0]['tid'])) {
      form_set_error('field_discipline', t('Discipline/s field is required for Academic staff'));
    }
  }
}

/**
 * Implements hook_permission().
 *
 * Create an extra permission so that admins with 'Administer Users' permission
 * cannot actually change the user settings. That is reserved for site admins.
 * Admins do still need to be able to create and edit users, though.
 */
function uom_custom_permission() {
  return array(
    'change user settings' => array(
      'title' => t('Change User Settings'),
      'description' => t('Change the way users register with the site.'),
      'restrict access' => TRUE,
    ),
    'change role permissions' => array(
      'title' => t('Change Role Permissions'),
      'description' => t('Change the permissions assigned to roles.'),
      'restrict access' => TRUE,
    ),
    'edit url aliases' => array(
      'title' => t('Edit URL Aliases'),
      'description' => t('View and edit URL aliases, but not URL alias settings or bulk updates.'),
    ),
    'edit url redirects' => array(
      'title' => t('Edit URL Redirects'),
      'description' => t('View and edit URL redirects, but not URL redirect settings.'),
    ),
  );
}

/**
 * Implements hook_user_view().
 */
function uom_custom_user_view($account, $view_mode, $langcode) {
  $profile_links = array();

  // Which roles to create links for.
  $staff_rids = array_filter(variable_get('uom-staff-roles', array()));

  foreach ($account->roles as $rid => $role) {
    if (in_array($rid, $staff_rids)) {
      $role_link = _uom_custom_staff_type_link($role);
      $profile_links[$role_link] = array(
        'title' => t('View @role profile.', array('@role' => $role)),
        'href' => url('about-us/'. $role_link .'/'. check_plain($account->name), array('absolute' => TRUE)),
      );
    }
  }

  $account->content['profile_links'] = theme('links', array('links' => $profile_links));
}

/**
 * Implements hook_token_info().
 */
function uom_custom_token_info() {
  $user['uom-staff-type'] = array(
    'name' => t('UoM Staff Type'),
    'description' => t('The staff type, as determined by the user\'s roles.'),
  );

  return array(
    'tokens' => array('user' => $user),
  );
}

/**
 * Implements hook_tokens().
 */
function uom_custom_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $url_options = array('absolute' => TRUE);
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'user' && !empty($data['user'])) {
    $account = $data['user'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'uom-staff-type':
          $staff = _uom_custom_staff_type($account);
          $replacements[$original] = ($sanitize) ? check_plain($staff) : $staff;
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_filter_info()
 */
function uom_custom_filter_info() {
  return array(
    'uom_custom_node_link' => array(
      'title' => t('UoM Node Link'),
      'description' => t('Rewrite internal <em>/node/NN</em> links to use the node alias instead.'),
      'process callback' => '_uom_custom_node_link',
      'tips callback' => '_uom_custom_node_link_tips',
    ),
  );
}

/**
 * Filter callback for uom_custom_node_link.
 */
function _uom_custom_node_link($text, $filter) {
  // The match pattern should include quotes, to avoid replacing only part
  // of a node link, such as 'node/42' on what is actually 'node/427'. The
  // braces around the node nid regex part means I get the pure node nids
  // in a second array, so I don't need to substr() the whole matched string.
  $pattern = '/"\/node\/([0-9]+)"/';
  $count = preg_match_all($pattern, $text, $matches);

  // Early return if there are no matches.
  if (empty($count)) {
    return $text;
  }

  // Array of replacements.
  $replace = array();

  // Grab the relative node link, and rewrite it to the alias. Then
  // add it to the array of replacements to perform.
  for($i = 0; $i < $count; $i++) {
    $replace[$matches[0][$i]] = '"'. url('node/'. $matches[1][$i]) .'"';
  }

  // Replace the links in the text, return it.
  return strtr($text, $replace);
}

/**
 * Filter tips callback for uom_custom_node_link.
 */
function _uom_custom_node_link_tips($filter, $format, $long = FALSE) {
  return t('Internal links in the form <em>node/nid</em> are rewritten to use the node alias, if available.');
}

/**
 * Implements hook_formatter_info().
 */
function uom_custom_field_formatter_info() {
  return array(
    'uom_html5_phone_link' => array(
      'label' => t('HTML5 Phone Link'),
      'field types' => array('text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function uom_custom_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Build variables array for formatter.
  $variables = array(
    '#obj_type' => $obj_type,
    '#object' => $object,
    '#field' => $field,
    '#instance' => $instance,
    '#langcode' => $langcode,
    '#items' => $items,
    '#display' => $display,
  );

  if (function_exists($function = "{$display['module']}_field_formatter_{$display['type']}")) {
    $element[0] = array(
      '#markup' => $function($variables),
    );
  }

  return $element;
}

/**
 * Field Formatter; HTML5 Phone Link.
 *
 * Contains a little bit of smarts to render full international
 * numbers if possible.
 */
function uom_custom_field_formatter_uom_html5_phone_link($variables) {
  // Check for an Australian mobile number.
  if (strpos($variables['#items'][0]['safe_value'], '04') === 0) {
    $phone = substr($variables['#items'][0]['safe_value'], 1);
    $phone = strtr($phone, array(' ' => ''));
    return '<a href="tel:+61'. $phone .'">'. $variables['#items'][0]['safe_value'] .'</a>';
  }
  // Check for a landline number with the Victoria/Tassie prefix.
  else if (strpos($variables['#items'][0]['safe_value'], '03') === 0) {
    $phone = substr($variables['#items'][0]['safe_value'], 1);
    $phone = strtr($phone, array(' ' => ''));
    return '<a href="tel:+61'. $phone .'">'. $variables['#items'][0]['safe_value'] .'</a>';
  }
  // Check for an interstate number.
  else if (strpos($variables['#items'][0]['safe_value'], '0') === 0) {
    $phone = strtr($variables['#items'][0]['safe_value'], array(' ' => ''));
    return '<a href="tel:'. $phone .'">'. $variables['#items'][0]['safe_value'] .'</a>';
  }
  // Check for an international number.
  else if (strpos($variables['#items'][0]['safe_value'], '+') === 0) {
    $phone = strtr($variables['#items'][0]['safe_value'], array(' ' => ''));
    return '<a href="tel:'. $phone .'">'. $variables['#items'][0]['safe_value'] .'</a>';
  }

  // Must be unprefixed local. Just add prefix.
  $phone = strtr($variables['#items'][0]['safe_value'], array(' ' => ''));
  return '<a href="tel:+613'. $phone .'">'. $variables['#items'][0]['safe_value'] .'</a>';
}


// TODO: Formatters that allow users to be linked to a defined staff type
// profile page as defined via views.

/**
 * Helper that returns a sanitised (for use in URL) staff type string.
 *
 * If a user has multiple staff type roles assigned, the "highest" level
 * one will be used. Only roles set on the settings page will be used.
 *
 * @param $account
 *   A valid user object.
 * @return
 *   A string.
 */
function _uom_custom_staff_type($account) {
  // Which roles to create links for.
  $staff_rids = array_filter(variable_get('uom-staff-roles', array()));
  foreach ($account->roles as $rid => $role) {
    if (in_array($rid, $staff_rids)) {
      return _uom_custom_staff_type_link($role);
    }
  }
}

/**
 * Helper to sanely format a role name for user in a link.
 */
function _uom_custom_staff_type_link($role) {
  return preg_replace('/[^a-zA-z0-9]/', '-', $role);
}

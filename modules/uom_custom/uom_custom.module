<?php
/**
 * @file
 * Custom module for Faculty of Arts Drupal sites.
 */

/**
 * Implements hook_element_info().
 */
function uom_custom_element_info() {
  $types['theme_styles'] = array(
    '#items' => array(),
    '#pre_render' => array('drupal_pre_render_styles'),
    '#group_callback' => 'drupal_group_css',
    '#aggregate_callback' => 'drupal_aggregate_css',
  );
  return $types;
}

/**
 * Implements hook_menu().
 */
function uom_custom_menu() {
  $items['admin/config/people/uom-staff-profiles'] = array(
    'title' => t('UoM Staff Profiles'),
    'description' => t('UoM Staff Profiles'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uom_custom_admin_settings'),
    'access arguments' => array('change role permissions'),
    'file' => 'uom_custom.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function uom_custom_init() {
  global $user;

  // Hide the admin menu icon (and its links) for non site-admin users.
  // And the blocks references on the structure > menus page.
  if (!in_array('site admin', $user->roles)) {
    drupal_add_css('#admin-menu .dropdown li.admin-menu-icon { display: none; }', array('type' => 'inline'));
    drupal_add_css('.page-admin-structure-menu #block-system-help { display: none; }', array('type' => 'inline'));
    drupal_add_css('.page-admin-structure-menu ul.action-links { display: none; }', array('type' => 'inline'));
  }

  // Hide format selection on text areas.
  drupal_add_css('fieldset.filter-wrapper { display: none; }', array('type' => 'inline'));
  drupal_add_css('div.wysiwyg-toggle-wrapper { display: none; }', array('type' => 'inline'));

  // Hide wysiwyg field original content.
  drupal_add_css('.insert.form-item.container-inline { display: none; }', array('type' => 'inline'));
  drupal_add_css('.filefield-source-views .field-container { display: none; }', array('type' => 'inline'));

  // Add audio control javascript.
  drupal_add_js(drupal_get_path('module', 'uom_custom') . '/js/audio.js');
}

/**
 * Implements hook_menu_alter().
 *
 *
 * The URL aliases and URL redirect permissions assume you will move
 * the respective Management Menu entries to a different place in that
 * menu; e.g.: under admin/content
 */
function uom_custom_menu_alter(&$items) {
  // Change the required permission for the User Settings page.
  $items['admin/config/people/accounts']['access arguments'] = array('change user settings');

  // Change the permission for the Permissions page.
  $items['admin/people/permissions']['access arguments'] = array('change role permissions');

  // Change the permission needed to list and edit URL aliases.
  $items['admin/config/search/path']['access arguments'] = array('edit url aliases');
  $items['admin/config/search/path/edit/%path']['access arguments'] = array('edit url aliases');
  $items['admin/config/search/path/delete/%path']['access arguments'] = array('edit url aliases');

  // Change the permission needed to list and edit URL redirects.
  $items['admin/config/search/redirect']['access arguments'] = array('edit url redirects');
  $items['admin/config/search/redirect/404']['access arguments'] = array('edit url redirects');
}

/**
 * Implements hook_form_alter().
 */
function uom_custom_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == 'user_profile_form' || $form_id == 'user_register_form') {

    // Rearrange user.module core fields a bit.
    $form['account']['mail']['#weight'] = -10;
    $form['account']['name']['#weight'] =  -9;
    $form['account']['pass']['#weight'] =  -8;
    $form['account']['current_pass']['#weight'] =  -7;
    $form['account']['current_pass_required_values']['#weight'] =  -6;

    $form['account']['mail']['#description'] = t('A valid e-mail address. All e-mails from the system will be sent to this address. This email address will be listed on your profile page. ');
    $form['account']['current_pass']['#description'] =  t('If you want to change your <em class="placeholder">E-mail address</em> or <em class="placeholder">Password</em>, you must enter your current password to confirm. <a href="/user/password" title="Request new password via e-mail.">Request new password</a>.');

    // Do not autocomplete email or username fields.
    $form['account']['mail']['#attributes']['autocomplete'] = 'off';
    $form['account']['name']['#attributes']['autocomplete'] = 'off';
    $form['account']['pass']['pass1']['#attributes']['autocomplete'] = 'off';
    $form['account']['pass']['pass2']['#attributes']['autocomplete'] = 'off';

    // Change the labels on the discipline field to the term DESCRIPTION.
    $language_code = $form['field_discipline']['#language'];
    foreach ($form['field_discipline'][$language_code]['#options'] as $tid => $name) {
      if (is_numeric($tid)) {
        $term = taxonomy_term_load($tid);
        if (!empty($term)) {
          $form['field_discipline'][$language_code]['#options'][$tid] = strip_tags($term->description);
        }
      }
    }

    // If you are academic staff only
    if(__is_academic_staff_only($user))
    {
	// Hide --> "if you want to change your E-mail address or Password, you must enter your current password to confirm"
	$form['account']['current_pass']['#disabled'] = true;
	$form['account']['current_pass_required_values']['#disabled'] = true;	
    }

    // Some fields should be mandatory *only* for academic staff editing their own profile.
    if (
        ($form['#user']->uid == $user->uid && !in_array('academic staff', $user->roles)) ||
        (in_array('admin', $user->roles)) || (in_array('site admin', $user->roles))
    ) {
      $language_code = $form['field_discipline']['#language'];
      $form['field_discipline'][$language_code]['#required'] = FALSE;
      $form['field_academic_staff_type'][$language_code]['#required'] = FALSE;	

      // Inject a validate handler that runs before the one in user.module. If
      // the 'academic staff' role is checked, the discipline field becomes mandatory again.
      array_unshift($form['#validate'], 'uom_custom_user_profile_form_validate');
    }

    // LDAP module disabled some form items. If they're disabled, actually just hide them.
    if (module_exists('ldap_authentication')) {
      $ldap_link = FALSE;
      foreach ($form['account'] as &$element) {
        if (!empty($element['#disabled'])) {
          $ldap_link = TRUE;
          $element['#access'] = FALSE;
        }
      }
      if ($ldap_link) {
        $ldap = variable_get('ldap_authentication_conf', array());
        $form['account']['ldap'] = array(
          '#type' => 'markup',
          '#markup' => t('You cannot change your password here. You must reset your @password via the directions at <a href="!link">@title</a>.', array('@password' => $ldap['loginUIPasswordTxt'], '!link' => $ldap['ldapUserHelpLinkUrl'], '@title' => $ldap['ldapUserHelpLinkText'])),
          '#weight' => -8,
        );
      }
    }

    // Org unit is optional for site admins (who are ABC IT and not SoLL staff)
    if (in_array('site admin', $user->roles)) {
      $language_code = $form['field_discipline']['#language'];
      $form['field_org_unit'][$language_code]['#required'] = FALSE;
    }

    // Only site admins can create more site admins.
    if (!in_array('site admin', $user->roles)) {
      $role = db_select('role', 'r')->fields('r')->condition('name', 'site admin', '=')->execute()->fetchObject();
      unset ($form['account']['roles']['#options'][$role->rid]);
    }

    // Hide URL redirects on the user profile form.
    if (!empty($form['redirect'])) {
      $form['redirect']['#access'] = FALSE;
    }
  }

  if ($form_id == 'user_register_form') {
    // If LDAP Query module is installed, offer to lookup the username.. but NOT if editing an existing user.
    if (module_exists("ldap_query") && empty($form['#user']->uid)) {
      $form['account']['name']['#description'] = t('Leave this field empty to lookup a username based on the <em>@unimelb.edu.au</em> email address entered above. Otherwise, spaces are allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.');
      // Do not bold the label on the username field.
      drupal_add_css('.page-admin-people .form-item-name label { font-weight: normal; }', array('type' => 'inline'));

      // And add our extra validator :-)
      array_unshift($form['#validate'], 'uom_custom_username_lookup_validate');
    }
  }

  if ($form_id == 'user_profile_form') {
    if (!in_array('site admin', $user->roles)) {
      drupal_add_css('.page-user-edit .form-type-password-confirm { display: none; }', array('type' => 'inline'));
    }
  }

  // VBO Administer People. Ensure admins cannot delete site admins.
  if ($form_id == 'views_form_peopel_1_page' && !in_array('site admin', $user->roles)) {
    foreach ($form['views_bulk_operations'] as $idx => $item) {
      if (is_array($item)) {
        $account = user_load($item['#return_value']);
        if (in_array('site admin', $account->roles)) {
          $form['views_bulk_operations'][$idx]['#access'] = FALSE;
        }
      }
    }
  }

  // Remove the preview changes button.
  if ($form_id == 'page_node_form' || $form_id == 'event_node_form') {
    if (!empty($form['actions']['preview_changes'])) {
      $form['actions']['preview_changes']['#access'] = FALSE;
    }
    // Change line height on the date field, so the checkbox is accessible.
    drupal_add_css('.fieldset-legend { line-height: 1em; }', array('type' => 'inline'));
  }
}

/**
 * Extra validation handler that tries to fetch a username from the Central ITS
 * LDAP databse, based on the given email address.
 */
function uom_custom_username_lookup_validate($form, &$form_state) {
  if ($result = uom_custom_username_lookup($form_state['values']['mail'])) {
    drupal_set_message(t('Found staff details for %mail, please check that they are correct', array('%name' => $result['name'], '%mail' => $form_state['values']['mail'])), 'warning');

    // Username.
    $form_state['input']['name'] = $result['name'];
    $form_state['complete form']['account']['name']['#value'] = $form_state['complete form']['account']['name']['#default_value'] = $result['name'];
    form_set_value($form['account']['name'], $result['name'], $form_state);

    // First name.
    $language =  $form_state['complete form']['field_first_name']['#language'];
    $form_state['input']['field_first_name'] = array($language => array(0 => array('value' => $result['givenname'])));
    $form_state['complete form']['field_first_name'][$language][0]['value']['#value']
      = $form_state['complete form']['field_first_name'][$language][0]['value']['#default_value']
      = $result['givenname'];
    form_set_value($form['field_first_name'], array($language => array(0 => array('value' => $result['givenname']))), $form_state);

    // Surname.
    $language =  $form_state['complete form']['field_last_name']['#language'];
    $form_state['input']['field_last_name'] = array(LANGUAGE_NONE => array(0 => array('value' => $result['sn'])));
    $form_state['complete form']['field_last_name'][$language][0]['value']['#value']
      = $form_state['complete form']['field_last_name'][$language][0]['value']['#default_value']
      = $result['sn'];
    form_set_value($form['field_last_name'], array($language => array(0 => array('value' => $result['sn']))), $form_state);

    // Set a random new password, LDAP pass will be used anyway.
    if (empty($form_state['values']['pass'])) {
      form_set_value($form['account']['pass']['pass1'], 'empty', $form_state);
      form_set_value($form['account']['pass']['pass2'], 'empty', $form_state);
    }
  }
}

/**
 * Lookup a username is LDAP.
 */
function uom_custom_username_lookup($mail) {
  $ldap_query = ldap_query_get_queries('uom_username_lookup', 'all', TRUE);
  // $ldap_query->filter = sprintf('(&(ou=Arts)(auedupersontype=staff)(mail=%s))', $mail);
  $ldap_query->filter = sprintf('(|(mail=%s)(auEduPersonEmailAddress=%s))', $mail, $mail);
  $result = $ldap_query->query();

  if ($result['count'] == 1) {
    return array(
      'name' => $result[0]['uid'][0],
      'givenname' => $result[0]['givenname'][0],
      'sn' => $result[0]['sn'][0],
    );      
  }
  return FALSE;
}

/**
 * Extra validation handler for the user_profile_form form. This only runs if
 * the form is being submitted by an admin or site-admin user.
 */
function uom_custom_user_profile_form_validate($form, &$form_state) {
  global $user;

  // If the user being edited or created is 'academic staff', the some fields
  // behaves as if it is mandatory.
  $role = db_select('role', 'r')->fields('r')->condition('name', 'academic staff', '=')->execute()->fetchObject();

  $roles = array_filter($form_state['values']['roles']);
  if (!empty($roles[$role->rid])) {
    $language_code = $form['field_discipline']['#language'];
    if (empty($form_state['values']['field_discipline'][$language_code][0]['tid'])) {
      form_set_error('field_discipline', t('Discipline/s field is required for Academic staff'));
    }

	if (empty($form_state['values']['field_academic_staff_type'][$language_code][0]['tid'])) {
      form_set_error('field_academic_staff_type', t('Academic staff type field is required for Academic staff'));
    }
  }
}

/**
 * Implements hook_permission().
 *
 * Create an extra permission so that admins with 'Administer Users' permission
 * cannot actually change the user settings. That is reserved for site admins.
 * Admins do still need to be able to create and edit users, though.
 */
function uom_custom_permission() {
  return array(
    'change user settings' => array(
      'title' => t('Change User Settings'),
      'description' => t('Change the way users register with the site.'),
      'restrict access' => TRUE,
    ),
    'change role permissions' => array(
      'title' => t('Change Role Permissions'),
      'description' => t('Change the permissions assigned to roles.'),
      'restrict access' => TRUE,
    ),
    'edit url aliases' => array(
      'title' => t('Edit URL Aliases'),
      'description' => t('View and edit URL aliases, but not URL alias settings or bulk updates.'),
    ),
    'edit url redirects' => array(
      'title' => t('Edit URL Redirects'),
      'description' => t('View and edit URL redirects, but not URL redirect settings.'),
    ),
  );
}

/**
 * Implements hook_user_view().
 */
function uom_custom_user_view($account, $view_mode, $langcode) {
  $profile_links = _uom_custom_profile_links($account);
  $account->content['profile_links'] = theme('links', array('links' => $profile_links));
}

/**
 * Helper to return a profile link for a given user.
 */
function _uom_custom_profile_links($account) {
  $profile_links = array();

  // Early return if the profile is not public.
  if ($account->field_share_profile[LANGUAGE_NONE][0]['value'] == 'No') {
    return $profile_links;
  }

  // Which roles to create links for.
  $staff_rids = array_filter(variable_get('uom-staff-roles', array()));

  foreach ($account->roles as $rid => $role) {
    if (in_array($rid, $staff_rids)) {
      $role_link = _uom_custom_staff_type_link($role);
      $profile_links[$role_link] = array(
        'title' => t('View @role profile.', array('@role' => $role)),
        'href' => url($role_link .'/'. check_plain($account->name), array('absolute' => TRUE)),
      );
    }
  }
  return $profile_links;
}

/**
 * Implemnets hook_element_info_alter().
 */
function uom_custom_element_info_alter(&$type) {
  if (isset($type['password_confirm'])) {
    $type['password_confirm']['#process'][] = '_uom_custom_process_password_confirm';
  }
}

/**
 * Mess with the password_confirm form element.
 */
function _uom_custom_process_password_confirm($element) {
  if ($element['#array_parents'][0] == 'account') {
    $element['pass1']['#title'] = t('New password');
    $element['pass2']['#title'] = t('Confirm new password');
  }
  return $element;
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Add WYSIWYG treatment to textarea summary form items.
 */
function uom_custom_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['summary'])) {
    drupal_add_css(drupal_get_path('module', 'uom_custom') . '/css/textarea-summary.css');
    drupal_add_js(drupal_get_path('module', 'uom_custom') . '/js/textarea-summary.js');
    $element['summary']['#type'] = 'text_format';
    $element['summary']['#format'] = $element['#format'];
  }
}

/**
 * Implements hook_field_attach_presave().
 */
function uom_custom_field_attach_presave($entity_type, $entity) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  foreach (field_info_instances($entity_type, $bundle) as $instance) {
    $field = field_info_field_by_id($instance['field_id']);
    $field_name = $field['field_name'];
    if ($field['type'] == 'text_with_summary' && !empty($entity->$field_name)) {
      $language = $entity->language;
      foreach ($entity->{$field_name}[$language] as $id => &$value) {
        if (is_array($value['summary'])) {
          $value['summary'] = $value['summary']['value'];
        }
      }
    }
  }
}

/**
 * Implements hook_token_info().
 */
function uom_custom_token_info() {
  $user['uom-staff-type'] = array(
    'name' => t('UoM Staff Type'),
    'description' => t('The staff type, as determined by the user\'s roles.'),
  );
  $node['uom-zone-path'] = array(
    'name' => t('UoM Zone Path'),
    'description' => t('The URL path of the site section vocabulary this node is classified under.'),
  );
  $node['uom-event-path'] = array(
    'name' => t('UoM Event Path'),
    'description' => t('The URL path for the date this event will be held.'),
  );
  $node['uom-event-path-day'] = array(
    'name' => t('UoM Event Day'),
    'description' => t('The numeric day of the month this event will be held.'),
  );
  $node['uom-event-path-month'] = array(
    'name' => t('UoM Event Month'),
    'description' => t('The numeric month for the date this event will be held.'),
  );
  $node['uom-event-path-year'] = array(
    'name' => t('UoM Event Year'),
    'description' => t('The full year for the date this event will be held.'),
  );

  return array(
    'tokens' => array(
      'user' => $user,
      'node' => $node,
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function uom_custom_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $url_options = array('absolute' => TRUE);
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'user' && !empty($data['user'])) {
    $account = $data['user'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'uom-staff-type':
          $staff = _uom_custom_staff_type($account);
          $replacements[$original] = ($sanitize) ? check_plain($staff) : $staff;
          break;
      }
    }
  }

  if ($type == 'node' && !empty($data['node'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'uom-zone-path':
          $path = _uom_custom_zone_path($data['node']);
          $replacements[$original] = ($sanitize) ? check_plain($path) : $path;
          break;

        case 'uom-event-path':
          $path = _uom_custom_event_path($data['node']);
          $replacements[$original] = ($sanitize) ? check_plain($path) : $path;
          break;

        case 'uom-event-path-day':
          $path = _uom_custom_event_path($data['node'], '%d');
          $replacements[$original] = ($sanitize) ? check_plain($path) : $path;
          break;
        case 'uom-event-path-month':
          $path = _uom_custom_event_path($data['node'], '%m');
          $replacements[$original] = ($sanitize) ? check_plain($path) : $path;
          break;
        case 'uom-event-path-year':
          $path = _uom_custom_event_path($data['node'], '%Y');
          $replacements[$original] = ($sanitize) ? check_plain($path) : $path;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_filter_info()
 */
function uom_custom_filter_info() {
  return array(
    'uom_custom_node_link' => array(
      'title' => t('UoM Node Link'),
      'description' => t('Rewrite internal <em>/node/NN</em> links to use the node alias instead.'),
      'process callback' => '_uom_custom_node_link',
      'tips callback' => '_uom_custom_node_link_tips',
    ),
    'uom_custom_user_link' => array(
      'title' => t('UoM User Link'),
      'description' => t('Rewrite internal <em>/user/NN</em> links to use the profile alias instead.'),
      'process callback' => '_uom_custom_user_link',
      'tips callback' => '_uom_custom_user_link_tips',
    ),
    'uom_custom_nostealth' => array(
      'title' => t('UoM No Paragraph Spacing'),
      'description' => t('Remove lines that contain only space in a paragraph tag.'),
      'process callback' => '_uom_custom_nostealth',
      'tips callback' => '_uom_custom_nostealth_tips',
    ),
  );
}

/**
 * Filter callback for uom_custom_node_link.
 */
function _uom_custom_node_link($text, $filter) {
  // The match pattern should include quotes, to avoid replacing only part
  // of a node link, such as 'node/42' on what is actually 'node/427'. The
  // braces around the node nid regex part means I get the pure node nids
  // in a second array, so I don't need to substr() the whole matched string.
  $pattern = '/"\/node\/([0-9]+)(#[\w]+)?(\?[^\"]+)?"/';
  $count = preg_match_all($pattern, $text, $matches);

  // Early return if there are no matches.
  if (empty($count)) {
    return $text;
  }

  // Array of replacements.
  $replace = array();

  // Grab the relative node link, and rewrite it to the alias. Then
  // add it to the array of replacements to perform.
  for($i = 0; $i < $count; $i++) {
    $replace[$matches[0][$i]] = '"'. url('node/'. $matches[1][$i]) . $matches[2][$i] . $matches[3][$i] .'"';
  }

  // Replace the links in the text, return it.
  return strtr($text, $replace);
}

/**
 * Filter tips callback for uom_custom_node_link.
 */
function _uom_custom_node_link_tips($filter, $format, $long = FALSE) {
  return t('Internal links in the form <em>node/nid</em> are rewritten to use the node alias, if available.');
}

/**
 * Filter callback for uom_custom_user_link.
 */
function _uom_custom_user_link($text, $filter) {
  // The match pattern should include quotes, to avoid replacing only part
  // of a node link, such as 'user/42' on what is actually 'user/427'. The
  // braces around the user nid regex part means I get the pure user uids
  // in a second array, so I don't need to substr() the whole matched string.
  $pattern = '/"\/user\/([0-9]+)(#[\w]+)?(\?[^\"]+)?"/';
  $count = preg_match_all($pattern, $text, $matches);

  // Early return if there are no matches.
  if (empty($count)) {
    return $text;
  }

  // Array of replacements.
  $replace = array();

  // Grab the relative node link, and rewrite it to the alias. Then
  // add it to the array of replacements to perform.
  for($i = 0; $i < $count; $i++) {
    $account = user_load($matches[1][$i]);
    $link = array_shift(_uom_custom_profile_links($account));
    if (!empty($link)) {
      $replace[$matches[0][$i]] = '"'. $link['href'] . $matches[2][$i] . $matches[3][$i] .'"';
    }
  }

  // Replace the links in the text, return it.
  return strtr($text, $replace);
}

/**
 * Filter tips callback for uom_custom_node_link.
 */
function _uom_custom_user_link_tips($filter, $format, $long = FALSE) {
  return t('Internal links in the form <em>user/uid</em> are rewritten to use the profile alias, if available.');
}

/**
 * Filter callback for uom_custom_nostealth.
 */
function _uom_custom_nostealth($text, $filter) {
  return preg_replace('/<p>(&nbsp;|[\s])+<\/p>/', '', $text);
}

/**
 * Filter tips callback for uom_custom_nostealth.
 */
function _uom_custom_nostealth_tips($filter, $format, $long = FALSE) {
  return t('Remove empty paragraph tags that have been added to provide extra line spacing.');
}

/**
 * Implements hook_formatter_info().
 */
function uom_custom_field_formatter_info() {
  return array(
    'uom_html5_phone_link' => array(
      'label' => t('HTML5 Phone Link'),
      'field types' => array('text'),
    ),
    'uom_image_floater' => array(
      'label' => t('Floated Image'),
      'field types' => array('image', 'file'),
      'settings' => array(
        'image_style' => '',
        'image_link' => '',
        'image_float' => '',
      ),
    ),
    'uom_image_colourbox' => array(
      'label' => t('Colourbox Image'),
      'field types' => array('image', 'file'),
      'settings' => array(
        'colorbox_node_style' => '',
        'colorbox_image_style' => '',
        'colorbox_gallery' => 'post',
        'colorbox_gallery_custom' => '',
        'colorbox_caption' => 'auto',
        'colorbox_caption_custom' => '',
        'image_style' => '',
        'image_link' => '',
        'image_float' => '',
      ),
    ),
    'uom_inline_file' => array(
      'label' => t('Inline File Link'),
      'field types' => array('file'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function uom_custom_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Settings for the floated image formatter.
  if ($display['type'] == 'uom_image_floater') {
    $element = image_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
    if ($field['cardinality'] != 1) {
      $element['image_float'] = _uom_custom_image_float_element($settings['image_float']);
    }
    return $element;
  }

  // Settings for the colourbox image formatter.
  if ($display['type'] == 'uom_image_colourbox') {
    $element = colorbox_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
    if ($field['cardinality'] != 1) {
      $element['image_float'] = _uom_custom_image_float_element($settings['image_float']);
    }
    return $element;
  }
}

/**
 * Helper that returns an image float control.
 */
function _uom_custom_image_float_element($default) {
  return array(
    '#title' => t('Float the image'),
    '#type' => 'select',
    '#options' => array('' => t('N/A'), 'left' => t('Left'), 'right' => t('Right')),
    '#description' => t('Float the image. If set to left or right, text will flow around the image.'),
    '#empty_option' => t('N/A'),
    '#default_value' => (!empty($default)) ? $default : '',
    '#weight' => -1,
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function uom_custom_field_formatter_settings_summary($field, $instance, $view_mode) {
  if ($instance['display'][$view_mode]['type'] == 'uom_image_floater') {
    if ($instance['widget']['type'] == 'image_image') {
      $settings = $instance['display'][$view_mode]['settings'];

      $summary = explode('<br />', image_field_formatter_settings_summary($field, $instance, $view_mode));

      // Display this setting only if image float is set.
      if (isset($settings['image_float']) && !empty($settings['image_float'])) {
        $summary[] = t('Image Float: @float', array('@float' => $settings['image_float']));
      }

      return implode('<br />', $summary);
    }
  }

  if ($instance['display'][$view_mode]['type'] == 'uom_image_colourbox') {
    if ($instance['widget']['type'] == 'image_image') {
      $settings = $instance['display'][$view_mode]['settings'];

      $summary = explode('<br />', colorbox_field_formatter_settings_summary($field, $instance, $view_mode));

      // Display this setting only if image float is set.
      if (isset($settings['image_float']) && !empty($settings['image_float'])) {
        $summary[] = t('Image Float: @float', array('@float' => $settings['image_float']));
      }

      return implode('<br />', $summary);
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function uom_custom_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if (empty($display['module'])) $display['module'] = 'uom_custom';

  // Build variables array for formatter.
  $variables = array(
    '#obj_type' => $obj_type,
    '#object' => $object,
    '#field' => $field,
    '#instance' => $instance,
    '#langcode' => $langcode,
    '#items' => $items,
    '#display' => $display,
  );

  if (function_exists($function = "{$display['module']}_field_formatter_{$display['type']}")) {
    $element[0] = array(
      '#markup' => $function($variables),
    );
  }

  return $element;
}

function uom_custom_field_formatter_uom_inline_file($variables) {
  if (!empty($variables['#items'][0])) {
    return theme('uom_custom_inline_file', array('item' => $variables['#items'][0]));
  }
}

/**
 * Field formatter; Floated Image.
 */
function uom_custom_field_formatter_uom_image_floater($variables) {
  // Early return.
  if (empty($variables['#items'])) {
    return;
  }

  $elements = array();

  // Check if the formatter involves a link.
  if(!empty($variables['#display']['settings']['image_link'])) {
    if ($variables['#display']['settings']['image_link'] == 'content') {
      $uri = entity_uri($entity_type, $entity);
    }
    elseif ($variables['#display']['settings']['image_link'] == 'file') {
      $link_file = TRUE;
    }
  }

  foreach ($variables['#items'] as $delta => $item) {
    if (!empty($item['field_description']) && (empty($item['alt']) || empty($item['title']))) {
      $language = empty($item['language']) ? LANGUAGE_NONE : $item['language'];
      $title = $item['field_description'][$language][0]['safe_value'];
      $item['alt'] = $item['title'] = $title;
    }

    // Make *certain* an alt and title attribute are present.
    else if (empty($item['alt'])) {
      $item['alt'] = t('Unnamed Image');
    }
    if (!isset($item['title'])) {
      $item['title'] = '';
    }

    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    if (!empty($variables['#display']['settings']['image_float'])) {
      $item['attributes'] = array(
        'alt' => $item['alt'],
        'title' => $item['title'],
        'align' => $variables['#display']['settings']['image_float'],
        'class' => 'image-float-'. $variables['#display']['settings']['image_float'],
      );
    }

    $elements[$delta] = array(
      '#theme' => 'image_formatter',
      '#item' => $item,
      '#image_style' => !empty($variables['#display']['settings']['image_style']) ? $variables['#display']['settings']['image_style'] : '',
      '#path' => isset($uri) ? $uri : '',
    );
  }

  return render($elements);
}

/**
 * Field formatter; Colorbox Image.
 */
function uom_custom_field_formatter_uom_image_colourbox($variables) {
  // Early return.
  if (empty($variables['#items'])) {
    return;
  }

  $elements = array();

  watchdog('uom_custom', print_r($variables, 1), array(), WATCHDOG_DEBUG);

  foreach ($variables['#items'] as $delta => $item) {
    if (!empty($item['field_description']) && (empty($item['alt']) || empty($item['title']))) {
      $language = empty($item['language']) ? LANGUAGE_NONE : $item['language'];
      $title = $item['field_description'][$language][0]['safe_value'];
      $item['alt'] = $item['title'] = $title;
    }

    // Make *certain* an alt and title attribute are present.
    else if (empty($item['alt'])) {
      $item['alt'] = t('Unnamed Image');
    }
    if (!isset($item['title'])) {
      $item['title'] = '';
    }

    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    if (!empty($variables['#display']['settings']['image_float'])) {
      $item['attributes'] = array(
        'class' => 'image-float-'. $variables['#display']['settings']['image_float'],
      );
    }

    $elements[$delta] = array(
      '#theme' => 'uom_custom_colourbox_image_formatter',
      '#item' => $item,
      '#node' => $variables['#object'],
      '#field' => $variables['#field'],
      '#display_settings' => $variables['#display']['settings'],
    );
  }

  return render($elements);
}

/**
 * Field Formatter; HTML5 Phone Link.
 *
 * Contains a little bit of smarts to render full international
 * numbers if possible.
 */
function uom_custom_field_formatter_uom_html5_phone_link($variables) {
  // Early return.
  if (empty($variables['#items'])) {
    return;
  }

  // Check for an Australian mobile number.
  if (strpos($variables['#items'][0]['safe_value'], '04') === 0) {
    $phone = substr($variables['#items'][0]['safe_value'], 1);
    $phone = strtr($phone, array(' ' => ''));
    return '<a href="tel:+61'. $phone .'">+61 '. $variables['#items'][0]['safe_value'] .'</a>';
  }
  // Check for a landline number with the Victoria/Tassie prefix.
  else if (strpos($variables['#items'][0]['safe_value'], '03') === 0) {
    $phone = substr($variables['#items'][0]['safe_value'], 1);
    $phone = strtr($phone, array(' ' => ''));
    return '<a href="tel:+61'. $phone .'">+61 '. $variables['#items'][0]['safe_value'] .'</a>';
  }
  // Check for an interstate number.
  else if (strpos($variables['#items'][0]['safe_value'], '0') === 0) {
    $phone = strtr($variables['#items'][0]['safe_value'], array(' ' => ''));
    return '<a href="tel:'. $phone .'">+61 '. $variables['#items'][0]['safe_value'] .'</a>';
  }
  // Check for an international number.
  else if (strpos($variables['#items'][0]['safe_value'], '+') === 0) {
    $phone = strtr($variables['#items'][0]['safe_value'], array(' ' => ''));
    return '<a href="tel:'. $phone .'">'. $variables['#items'][0]['safe_value'] .'</a>';
  }
  // Assuming unprefixed local. Just add prefix.
  else if (is_numeric($variables['#items'][0]['safe_value']{0})) {
    $phone = strtr($variables['#items'][0]['safe_value'], array(' ' => ''));
    return '<a href="tel:+613'. $phone .'">+61 3 '. $variables['#items'][0]['safe_value'] .'</a>';
  }

  // Not numeric, just return it and don't link it to anything.
  return $variables['#items'][0]['safe_value'];
}

/**
 * Implements hook_theme().
 */
function uom_custom_theme($existing, $type, $theme, $path) {
  return array(
    'uom_custom_inline_file' => array(
      'variables' => array(
        'item' => NULL
      ),
      'file' => 'uom_custom.theme.inc',
    ),
    'uom_custom_colourbox_image_formatter' => array(
      'variables' => array(
        'item' => array(),
        'node' => NULL,
        'field' => NULL,
        'display_settings' => array(),
      ),
      'file' => 'uom_custom.theme.inc',
    ),
    'uom_custom_colourbox_imagefield' => array(
      'variables' => array(
        'image' => array(),
        'path' => NULL,
        'title' => NULL,
        'gid' => NULL,
        'class' => NULL,
      ),
      'file' => 'uom_custom.theme.inc',
    ),
  );
}

// TODO: Formatters that allow users to be linked to a defined staff type
// profile page as defined via views.

/**
 * Helper that returns a sanitised (for use in URL) staff type string.
 *
 * If a user has multiple staff type roles assigned, the "highest" level
 * one will be used. Only roles set on the settings page will be used.
 *
 * @param $account
 *   A valid user object.
 * @return
 *   A string.
 */
function _uom_custom_staff_type($account) {
  // Which roles to create links for.
  $staff_rids = array_filter(variable_get('uom-staff-roles', array()));

  foreach ($account->roles as $rid => $name) {
    if (in_array($rid, $staff_rids)) {
      return db_select('role', 'r')->fields('r', array('name'))->condition('rid', $rid, '=')->execute()->fetchField();
    }
  }
  return 'staff';
}

/**
 * Helper to sanely format a role name for user in a link.
 */
function _uom_custom_staff_type_link($role) {
  return preg_replace('/[^a-zA-z0-9]/', '-', $role);
}

/**
 * Helper to turn a zone field value into a url path snippet.
 *
 * @param $node
 *   A valid node object.
 * @return
 *   A string.
 */
function _uom_custom_zone_path($node) {
  if (empty($node->field_zone[$node->language][0])) {
    return;
  }

  $path = array();

  $terms = taxonomy_get_parents_all($node->field_zone[$node->language][0]['tid']);
  foreach ($terms as $term) {
    $path[] = pathauto_cleanstring($term->name);
  }

  // Reverse this array and turn it into a pretty directory path.
  return implode('/', array_reverse($path));
}

/**
 * Helper to turn an event date field value into a url path snippet.
 *
 * @param $node
 *   A valid node object.
 * @return
 *   A string.
 */
function _uom_custom_event_path($node, $format = '%Y/%m/%d') {
  if (empty($node->field_dates[$node->language][0])) {
    return;
  }

  $date = strtotime($node->field_dates[$node->language][0]['value']);
  return strftime($format, $date);
}

/**
 * Implements hook_entity_info_alter().
 */
function uom_custom_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes']['thumb_left'] = array('label' => t('Thumbnail Left'), 'custom settings' => TRUE);
  $entity_info['file']['view modes']['thumb_right'] = array('label' => t('Thumbnail Right'), 'custom settings' => TRUE);
  $entity_info['file']['view modes']['medium_left'] = array('label' => t('Medium Left'), 'custom settings' => TRUE);
  $entity_info['file']['view modes']['medium_right'] = array('label' => t('Medium Right'), 'custom settings' => TRUE);
}

/**
 * Implements hook_wysiwyg_editor_settings_alter()
 */
function uom_custom_wysiwyg_editor_settings_alter(&$settings, $context) {

  // The $context variable contains information about the wysiwyg profile we're using
  // In this case we just need to check that the editor being used is ckeditor
  if ($context['profile']->editor == 'ckeditor') {
    // The $settings variable contains all the config options ckeditor uses. 
    // The array keys correspond directly with any setting that can be applied 
    // to CKEditor - as outlined in the CKEditor docs: 
    // http://docs.cksource.com/ckeditor_api/symbols/CKEDITOR.config.html 
    // Another way to override configuration is to use your own configuration javascript
    // file. In this case, we're going to add our own configuration file that will
    // Hold our stylesSet customizations... 
    $settings['customConfig'] = base_path() . drupal_get_path('module', 'uom_custom') . '/js/ckeditor_config.js';

    // We are also going to specify a custom body id and class
    $settings['bodyId'] = 'ckeditor_uom_custom_id';
    $settings['bodyClass'] = 'ckeditor_uom_custom_class';

    // To see what's in $settings and $context, install the devel module 
    // And run the variables through the dpm() function. 
  }

  // Make sure the toolbar is there
  if (!empty($settings['toolbar'])) {
    // These are our desired groupings. Buttons that aren't listed here will be
    // Grouped in one big group at the end
    $preferred_groupings[] = array('Source', 'Format', 'Styles');
    $preferred_groupings[] = array('Bold', 'Italic', 'Underline', 'Strike', 'Blockquote', 'RemoveFormat');
    $preferred_groupings[] = array('JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', 'BulletedList', 'NumberedList', 'Outdent', 'Indent');
    $preferred_groupings[] = array('Undo', 'Redo');
    $preferred_groupings[] = array('TextColor', 'BGColor');
    $preferred_groupings[] = array('Superscript', 'Subscript');
    if (in_array('site admin', $GLOBALS['user']->roles)) {
      $preferred_groupings[] = array('HorizontalRule', 'break');
    }
    $preferred_groupings[] = array('Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', 'SpellCheck', 'Scayt');
    $preferred_groupings[] = array('ShowBlocks', 'SpecialChar', '/');
    $preferred_groupings[] = array('Font', 'FontSize', 'Table');
    $preferred_groupings[] = array('SelectAll', 'Find', 'Replace');
    $preferred_groupings[] = array('Flash', 'Smiley');
    // Create a grouping without Image (and IMCE) in case of not site admin.
    if (in_array('site admin', $GLOBALS['user']->roles)) {
      $preferred_groupings[] = array('Anchor', 'Image', 'linkit', 'Link', 'Unlink', 'wysiwyg_fields_field_page_image', 'wysiwyg_fields_field_page_document', 'wysiwyg_fields_field_event_image', 'wysiwyg_fields_field_event_document', 'wysiwyg_fields_field_landingpage_doc_uploader', 'wysiwyg_fields_field_account_document', 'wysiwyg_fields_field_account_image',);
    }
    else {
      $preferred_groupings[] = array('linkit', 'Link', 'Unlink', 'wysiwyg_fields_field_page_image', 'wysiwyg_fields_field_page_document', 'wysiwyg_fields_field_event_image', 'wysiwyg_fields_field_event_document', 'wysiwyg_fields_field_landingpage_doc_uploader', 'wysiwyg_fields_field_account_document', 'wysiwyg_fields_field_account_image',);
    }
    $preferred_groupings[] = array('CreateDiv', 'Maximize');

    // An array to hold our newly grouped buttons
    $new_grouped_toolbar = array();

    // Compare each desired groupings to the configured buttons in the toolbar
    // and add them if they are there
    foreach($preferred_groupings as $button_group){
      // array_intersect() compares two arrays and returns an array of values
      // That are present in both arrays.
      $matching_buttons = array_intersect($button_group, $settings['toolbar'][0]);

      if (!empty($matching_buttons)) {
        // If there are matching buttons, we add it as an array to our
        // $new_grouped_toolbar. We run $matching_buttons through array_values()
        // to reset the array keys back to starting from 0.
        $new_grouped_toolbar[] = array_values($matching_buttons);
      }
    }

    // For extra safety, we're going to find any remaining buttons that we
    // missed. To do this we need to flatten our grouped buttons and compare
    // that against the original toolbar to see if we missed anything
    $new_flattened_toolbar = array();

    // Flatten our grouped buttons
    foreach ($new_grouped_toolbar as $key => $group) {
      $new_flattened_toolbar = array_merge($new_flattened_toolbar, $group);
    }

    // Array diff returns the keys that are present in the first argument, but
    // not not present in the second
    $remaining_buttons = array_diff($settings['toolbar'][0], $new_flattened_toolbar);

    if (!empty($remaining_buttons)) {
      // reset the array keys and add it to the $new_grouped_toolbar
      $new_grouped_toolbar[] = array_values($remaining_buttons);
    }

    // Replace the toolbar with our new, grouped toolbar.
    $settings['toolbar'] = $new_grouped_toolbar;
  }

  // Unfortunately, unsetting the 'Image' button means the whole group it is
  // a part of is no longer displayed. Thus, 'Image' is put in a group by
  // istself further up.
  if (!in_array('site admin', $GLOBALS['user']->roles)) {
    foreach ($settings['toolbar'] as $group => $toolbar) {
      foreach ($toolbar as $idx => $button) {
        if ($button == 'Image') {
          unset($settings['toolbar'][$group][$idx]);
        }
      }
    }
    unset($settings['filebrowserBrowseUrl']);
  }
}

/**
 * Implements hook_wysiwyg_plugin().
 */
function uom_custom_wysiwyg_plugin($editor) {
  if ($editor == 'ckeditor') {
    $path = 'sites/all/libraries/ckeditor/plugins/tableresize';
    if (file_exists("$path/plugin.js")) {
      return array(
        'tableresize' => array(
          'type' => 'buttons',
          'buttons' => array('TableResize' => t('Resize Table')),
          'path' => 'sites/all/libraries/ckeditor/plugins/tableresize',
          'load' => TRUE,
        ),
        'tabletools' => array(
          'type' => 'buttons',
          'buttons' => array('TableTools' => t('Table Tools')),
          'path' => 'sites/all/libraries/ckeditor/plugins/tabletools',
          'load' => TRUE,
        ),
      );
    }
  }
}

/**
 * Implements hook_views_api().
 */
function uom_custom_views_api() {
  return array("version" => "3.0");
}

/**
 * Implements hook_user_presave()
 */
function uom_custom_user_presave(&$edit, $account, $category) 
{
	// Record time stamp for last save user profile.
	if(isset($edit['field_last_edit'])) 
	{
		$edit['field_last_edit']['und'][0] = array('value' => time());
	}
}


function __is_academic_staff_only($user)
{
  if(
	in_array('academic staff', $user->roles) &&
	!in_array('admin', $user->roles) &&
	!in_array('site-admin', $user->roles)
  )
  {
	return true;
  }
  else
  {
	return false;
  }
}
